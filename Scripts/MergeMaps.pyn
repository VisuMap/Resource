# MergeMaps.pyn
#
# Caputure tSNE maps at different exaggeration levels ( i.e. scale ) and
# then merging them into a single tSNE maps.
#
markerList = [k*2 for k in [600, 700, 800, 900, 950, 1000]]
mapIs3D, showMaps, epochs = False, False, markerList[-1]
bsList = vv.Dataset.BodyListEnabled()

cs = New.CsObject('''
	public void CaptureOneMap(INumberTable nt, 
			List<IBody> bsList, int column0, bool mapIs3D) {
		double[][] M = nt.Matrix as double[][];
   	for(int k=0; k<bsList.Count; k++) {
			IBody b = bsList[k];
			double[] R = M[k];
			R[column0+0] = b.X;
			R[column0+1] = b.Y;
			if ( mapIs3D )
				R[column0+2] = b.Z;
		}
   }
''')

def BodyMoved():
	if pp.CurrentLoops in markerList:
		idx = markerList.index(pp.CurrentLoops)
		mapDim = 3 if mapIs3D else 2
		dsTable = pp.Tag
		cs.CaptureOneMap(dsTable, bsList, idx*mapDim, mapIs3D);
		if showMaps:
			mp = New.MapSnapshot().Show()
			mp.Title = "Epochs: " + str(pp.CurrentLoops)

def RunTsne(mds):
	mds.MaxLoops = epochs
	mds.RefreshFreq = 50
	mds.Is3D = mapIs3D
	mds.TracingType = 6
	mds.Show().Reset().Start()
	if mds.CurrentLoops != mds.MaxLoops:
		vv.Return()
	else:
		mds.Close()

def CreateMapDataset():
	vv.Map.Metric= "Correlation.Cosine Distance"
	mds = New.TsneMap()
	mds.InitialExaggeration = 10.0
	mds.FinalExaggeration = 1.1
	mds.PerplexityRatio = 0.02
	mds.AutoNormalizing = False
	mds.AutoScaling = True

	mapDim = 3 if mapIs3D else 2
	dsTable = New.NumberTable(bsList, mapDim*len(markerList))
	mds.Tag = dsTable
	vv.EventManager.OnBodyMoved('@BodyMoved()', mds)
	RunTsne(mds)
	return dsTable

def CreateMdsMap(nt):
	vv.Map.Metric= "EuclideanMetric"
	mds = New.TsneMap()
	mds.ChangeTrainingData(nt)
	mds.InitialExaggeration = 10.0
	mds.FinalExaggeration = 1.0
	mds.PerplexityRatio = 0.05
	mds.AutoNormalizing = True
	mds.AutoScaling = False
	RunTsne(mds)

#------------------------------------------

dsTable = CreateMapDataset()
CreateMdsMap(dsTable)

vv.Dataset.AddMap()

dsTable = CreateMapDataset()
CreateMdsMap(dsTable)
