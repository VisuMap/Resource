# MergeMaps.pyn
#
# Caputure tSNE maps at different exaggeration levels ( i.e. scale ) and
# then merging them into a single tSNE maps.
#
markerList = [k*2 for k in [500, 600, 700, 800, 900, 1000]]
mapIs3D, showMaps, epochs = False, False, markerList[-1]
bsList = vv.Dataset.BodyListEnabled()

cs = New.CsObject('''
	public void CaptureOneMap(INumberTable nt, 
			List<IBody> bsList, int column0, bool mapIs3D) {
   	for(int k=0; k<bsList.Count; k++) {
			IBody b = bsList[k];
			double[] R = nt.Matrix[k] as double[];
			R[column0+0] = b.X;
			R[column0+1] = b.Y;
			if ( mapIs3D )
				R[column0+2] = b.Z;
		}
   }
''')

# Callback function to extract map during t-SNE training process.
def BodyMoved():
	if pp.CurrentLoops in markerList:
		idx = markerList.index(pp.CurrentLoops)
		mapDim = 3 if mapIs3D else 2
		dsTable = pp.Tag
		cs.CaptureOneMap(dsTable, bsList, idx*mapDim, mapIs3D);
		if showMaps:
			mp = New.MapSnapshot().Show()
			mp.Title = "Epochs: " + str(pp.CurrentLoops)

# Run t-SNE with some default behaviors.
def RunTsne(mds):
	mds.MaxLoops = epochs
	mds.RefreshFreq = 50
	mds.Is3D = mapIs3D
	mds.TracingType = 6
	mds.Show().Reset().Start()
	if mds.CurrentLoops != mds.MaxLoops:
		vv.Return()
	else:
		mds.Close()

# Create dataset from maps extracted during the t-SNE training processes.
def CreateMapDataset():
	mds = New.TsneMap()
	mds.InitialExaggeration = 3.0
	mds.FinalExaggeration = 1.25
	mds.PerplexityRatio = 0.05
	mds.AutoNormalizing = False
	mds.AutoScaling = True
	mapDim = 3 if mapIs3D else 2
	dsTable = New.NumberTable(bsList, mapDim*len(markerList))
	mds.Tag = dsTable
	vv.EventManager.OnBodyMoved('@BodyMoved()', mds)
	RunTsne(mds)
	return dsTable

# Create dataset from multiple maps of the same dataset.
def ReadMapList( mapList ):
	dimList = [vv.Dataset.ReadMap(mn).Dimension for mn in mapList]
	rows = vv.Dataset.BodyListEnabled().Count
	nt = New.NumberTable(rows, sum(dimList))
	dimOffset = 0
	for k, mn in enumerate(mapList):
		bsList = vv.Dataset.ReadMapBodyList(mn, True)
		for R, b in zip(nt.Matrix, bsList):
			R[dimOffset + 0] = b.X
			R[dimOffset + 1] = b.Y
			if dimList[k] == 3:
				R[dimOffset + 2] = b.Z
		dimOffset += dimList[k]
	for k in range(rows):
		nt.RowSpecList[k].CopyFromBody(bsList[k])
	return nt

# Create a t-SNE map with specific dataset and metric
def CreateMdsMap(nt, mtr="EuclideanMetric"):
	mds = New.TsneMap()
	mds.ChangeTrainingData(nt, mtr)
	mds.InitialExaggeration = 10
	mds.FinalExaggeration = 0.85
	mds.PerplexityRatio = 0.15  # High PP is key for low dimensional data.
	mds.AutoNormalizing = True
	mds.AutoScaling = False
	RunTsne(mds)

#-----------------------------------------------------------------

dsTable = CreateMapDataset()
vv.Dataset.AddMap()
CreateMdsMap(dsTable)

'''
dsTable = ReadMapList(['A2', 'A3'])

vv.Dataset.AddMap()
CreateMdsMap(dsTable, "Numerical.City Block")

New.HeatMap(dsTable).Show()

for k in range(2):
	if k != 0: vv.Dataset.AddMap()
	dsTable = CreateMapDataset()
	CreateMdsMap(dsTable)
'''
